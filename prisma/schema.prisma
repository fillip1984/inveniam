// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth 
// Grants access on invitation only circumstance. Whenever someone attempts to log in, 
// we'll create an invitation initially set to false. We can then grant them access by 
// flipping the enabled column to true. The name and email fields only help you identify
// whether you want to grant access. The providerName tells you which provider they're using
// the providerAccountId should uniquely identify them from the provider
model Invitation {
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    email             String
    userId            String
    providerName      String
    providerAccountId String
    enabled           Boolean  @default(false)

    @@unique([providerName, providerAccountId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String           @id @default(cuid())
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    password       String?
    accounts       Account[]
    sessions       Session[]
    boards         Board[]
    tasks          Task[]
    tags           Tag[]
    Bucket         Bucket[]
    Comment        Comment[]
    CheckListItem  CheckListItem[]
    Attachment     Attachment[]
    S3StoredObject S3StoredObject[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Board {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String

    name        String
    description String

    buckets Bucket[]
}

model Bucket {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String

    name     String
    position Int //@unique //// TODO: https://stackoverflow.com/questions/75882073/prisma-update-two-items-switch-around-unique-constraint-on-index

    tasks   Task[]
    board   Board  @relation(fields: [boardId], references: [id])
    boardId String
}

model Task {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String

    text        String
    description String?
    complete    Boolean    @default(false)
    status      TaskStatus @default(NOT_STARTED)
    priority    String? //switch to enum after migrating to something other than SQLite
    startDate   DateTime?
    dueDate     DateTime?
    position    Int

    bucket   Bucket @relation(fields: [bucketId], references: [id])
    bucketId String

    tags TaskTags[]

    comments Comment[]

    checkListItems CheckListItem[]

    attachments Attachment[]

    // TODO: https://stackoverflow.com/questions/75882073/prisma-update-two-items-switch-around-unique-constraint-on-index
    // @@unique([bucketId, position])
}

model TaskTags {
    task       Task     @relation(fields: [taskId], references: [id])
    taskId     String
    tag        Tag      @relation(fields: [tagId], references: [id])
    tagId      String
    assignedAt DateTime @default(now())

    @@id([taskId, tagId])
}

model Tag {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String

    name        String
    description String?

    tags TaskTags[]
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String

    text   String
    posted DateTime

    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId String
}

model CheckListItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String

    text     String
    complete Boolean @default(false)

    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId String
}

model Attachment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String

    text   String
    added  DateTime
    link   S3StoredObject @relation(fields: [linkId], references: [id])
    linkId String         @unique

    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId String
}

model S3StoredObject {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String

    url        String
    bucketName String
    key        String

    Attachment Attachment?
}

enum TaskStatus {
    NOT_STARTED
    IN_PROGRESS
    BLOCKED_WAITING
    COMPLETE
    COMPLETE_WAITING_ON_NEXT_RECURRENCE
}
